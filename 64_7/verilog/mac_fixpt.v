// -------------------------------------------------------------
// 
// File Name: /Users/thilina/ConvLayerAccelerator/64_7/codegen/mac/hdlsrc/mac_fixpt.v
// Created: 2017-03-17 17:48:46
// 
// Generated by MATLAB 9.1, MATLAB Coder 3.2 and HDL Coder 3.9
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: mac_fixpt
// Source Path: mac_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module mac_fixpt
          (
           M_0,
           M_1,
           M_2,
           M_3,
           M_4,
           M_5,
           M_6,
           M_7,
           M_8,
           M_9,
           M_10,
           M_11,
           M_12,
           M_13,
           M_14,
           M_15,
           M_16,
           M_17,
           M_18,
           M_19,
           M_20,
           M_21,
           M_22,
           M_23,
           M_24,
           M_25,
           M_26,
           M_27,
           M_28,
           M_29,
           M_30,
           M_31,
           M_32,
           M_33,
           M_34,
           M_35,
           M_36,
           M_37,
           M_38,
           M_39,
           M_40,
           M_41,
           M_42,
           M_43,
           M_44,
           M_45,
           M_46,
           M_47,
           M_48,
           M_49,
           M_50,
           M_51,
           M_52,
           M_53,
           M_54,
           M_55,
           M_56,
           M_57,
           M_58,
           M_59,
           M_60,
           M_61,
           M_62,
           M_63,
           N_0,
           N_1,
           N_2,
           N_3,
           N_4,
           N_5,
           N_6,
           W_0,
           W_1,
           W_2,
           W_3,
           W_4,
           W_5,
           W_6,
           Tm,
           Tn,
           M_out_0,
           M_out_1,
           M_out_2,
           M_out_3,
           M_out_4,
           M_out_5,
           M_out_6,
           M_out_7,
           M_out_8,
           M_out_9,
           M_out_10,
           M_out_11,
           M_out_12,
           M_out_13,
           M_out_14,
           M_out_15,
           M_out_16,
           M_out_17,
           M_out_18,
           M_out_19,
           M_out_20,
           M_out_21,
           M_out_22,
           M_out_23,
           M_out_24,
           M_out_25,
           M_out_26,
           M_out_27,
           M_out_28,
           M_out_29,
           M_out_30,
           M_out_31,
           M_out_32,
           M_out_33,
           M_out_34,
           M_out_35,
           M_out_36,
           M_out_37,
           M_out_38,
           M_out_39,
           M_out_40,
           M_out_41,
           M_out_42,
           M_out_43,
           M_out_44,
           M_out_45,
           M_out_46,
           M_out_47,
           M_out_48,
           M_out_49,
           M_out_50,
           M_out_51,
           M_out_52,
           M_out_53,
           M_out_54,
           M_out_55,
           M_out_56,
           M_out_57,
           M_out_58,
           M_out_59,
           M_out_60,
           M_out_61,
           M_out_62,
           M_out_63
          );



  input   M_0;  // ufix1
  input   M_1;  // ufix1
  input   M_2;  // ufix1
  input   M_3;  // ufix1
  input   M_4;  // ufix1
  input   M_5;  // ufix1
  input   M_6;  // ufix1
  input   M_7;  // ufix1
  input   M_8;  // ufix1
  input   M_9;  // ufix1
  input   M_10;  // ufix1
  input   M_11;  // ufix1
  input   M_12;  // ufix1
  input   M_13;  // ufix1
  input   M_14;  // ufix1
  input   M_15;  // ufix1
  input   M_16;  // ufix1
  input   M_17;  // ufix1
  input   M_18;  // ufix1
  input   M_19;  // ufix1
  input   M_20;  // ufix1
  input   M_21;  // ufix1
  input   M_22;  // ufix1
  input   M_23;  // ufix1
  input   M_24;  // ufix1
  input   M_25;  // ufix1
  input   M_26;  // ufix1
  input   M_27;  // ufix1
  input   M_28;  // ufix1
  input   M_29;  // ufix1
  input   M_30;  // ufix1
  input   M_31;  // ufix1
  input   M_32;  // ufix1
  input   M_33;  // ufix1
  input   M_34;  // ufix1
  input   M_35;  // ufix1
  input   M_36;  // ufix1
  input   M_37;  // ufix1
  input   M_38;  // ufix1
  input   M_39;  // ufix1
  input   M_40;  // ufix1
  input   M_41;  // ufix1
  input   M_42;  // ufix1
  input   M_43;  // ufix1
  input   M_44;  // ufix1
  input   M_45;  // ufix1
  input   M_46;  // ufix1
  input   M_47;  // ufix1
  input   M_48;  // ufix1
  input   M_49;  // ufix1
  input   M_50;  // ufix1
  input   M_51;  // ufix1
  input   M_52;  // ufix1
  input   M_53;  // ufix1
  input   M_54;  // ufix1
  input   M_55;  // ufix1
  input   M_56;  // ufix1
  input   M_57;  // ufix1
  input   M_58;  // ufix1
  input   M_59;  // ufix1
  input   M_60;  // ufix1
  input   M_61;  // ufix1
  input   M_62;  // ufix1
  input   M_63;  // ufix1
  input   N_0;  // ufix1
  input   N_1;  // ufix1
  input   N_2;  // ufix1
  input   N_3;  // ufix1
  input   N_4;  // ufix1
  input   N_5;  // ufix1
  input   N_6;  // ufix1
  input   [13:0] W_0;  // ufix14_En13
  input   [13:0] W_1;  // ufix14_En13
  input   [13:0] W_2;  // ufix14_En13
  input   [13:0] W_3;  // ufix14_En13
  input   [13:0] W_4;  // ufix14_En13
  input   [13:0] W_5;  // ufix14_En13
  input   [13:0] W_6;  // ufix14_En13
  input   [6:0] Tm;  // ufix7
  input   [2:0] Tn;  // ufix3
  output  [13:0] M_out_0;  // ufix14_En12
  output  [13:0] M_out_1;  // ufix14_En12
  output  [13:0] M_out_2;  // ufix14_En12
  output  [13:0] M_out_3;  // ufix14_En12
  output  [13:0] M_out_4;  // ufix14_En12
  output  [13:0] M_out_5;  // ufix14_En12
  output  [13:0] M_out_6;  // ufix14_En12
  output  [13:0] M_out_7;  // ufix14_En12
  output  [13:0] M_out_8;  // ufix14_En12
  output  [13:0] M_out_9;  // ufix14_En12
  output  [13:0] M_out_10;  // ufix14_En12
  output  [13:0] M_out_11;  // ufix14_En12
  output  [13:0] M_out_12;  // ufix14_En12
  output  [13:0] M_out_13;  // ufix14_En12
  output  [13:0] M_out_14;  // ufix14_En12
  output  [13:0] M_out_15;  // ufix14_En12
  output  [13:0] M_out_16;  // ufix14_En12
  output  [13:0] M_out_17;  // ufix14_En12
  output  [13:0] M_out_18;  // ufix14_En12
  output  [13:0] M_out_19;  // ufix14_En12
  output  [13:0] M_out_20;  // ufix14_En12
  output  [13:0] M_out_21;  // ufix14_En12
  output  [13:0] M_out_22;  // ufix14_En12
  output  [13:0] M_out_23;  // ufix14_En12
  output  [13:0] M_out_24;  // ufix14_En12
  output  [13:0] M_out_25;  // ufix14_En12
  output  [13:0] M_out_26;  // ufix14_En12
  output  [13:0] M_out_27;  // ufix14_En12
  output  [13:0] M_out_28;  // ufix14_En12
  output  [13:0] M_out_29;  // ufix14_En12
  output  [13:0] M_out_30;  // ufix14_En12
  output  [13:0] M_out_31;  // ufix14_En12
  output  [13:0] M_out_32;  // ufix14_En12
  output  [13:0] M_out_33;  // ufix14_En12
  output  [13:0] M_out_34;  // ufix14_En12
  output  [13:0] M_out_35;  // ufix14_En12
  output  [13:0] M_out_36;  // ufix14_En12
  output  [13:0] M_out_37;  // ufix14_En12
  output  [13:0] M_out_38;  // ufix14_En12
  output  [13:0] M_out_39;  // ufix14_En12
  output  [13:0] M_out_40;  // ufix14_En12
  output  [13:0] M_out_41;  // ufix14_En12
  output  [13:0] M_out_42;  // ufix14_En12
  output  [13:0] M_out_43;  // ufix14_En12
  output  [13:0] M_out_44;  // ufix14_En12
  output  [13:0] M_out_45;  // ufix14_En12
  output  [13:0] M_out_46;  // ufix14_En12
  output  [13:0] M_out_47;  // ufix14_En12
  output  [13:0] M_out_48;  // ufix14_En12
  output  [13:0] M_out_49;  // ufix14_En12
  output  [13:0] M_out_50;  // ufix14_En12
  output  [13:0] M_out_51;  // ufix14_En12
  output  [13:0] M_out_52;  // ufix14_En12
  output  [13:0] M_out_53;  // ufix14_En12
  output  [13:0] M_out_54;  // ufix14_En12
  output  [13:0] M_out_55;  // ufix14_En12
  output  [13:0] M_out_56;  // ufix14_En12
  output  [13:0] M_out_57;  // ufix14_En12
  output  [13:0] M_out_58;  // ufix14_En12
  output  [13:0] M_out_59;  // ufix14_En12
  output  [13:0] M_out_60;  // ufix14_En12
  output  [13:0] M_out_61;  // ufix14_En12
  output  [13:0] M_out_62;  // ufix14_En12
  output  [13:0] M_out_63;  // ufix14_En12

  wire [0:63] M;  // ufix1 [64]
  wire [0:6] N;  // ufix1 [7]
  wire [13:0] W [0:6];  // ufix14_En13 [7]
  reg [13:0] M_out [0:63];  // ufix14_En12 [64]
  reg [13:0] mac_fixpt_M_local [0:63];  // ufix14_En12 [64]
  reg [6:0] mac_fixpt_tmp;  // ufix7
  reg [2:0] mac_fixpt_tmp_0;  // ufix3
  reg signed [31:0] mac_fixpt_nn;  // int32
  reg signed [31:0] mac_fixpt_mm;  // int32
  reg signed [31:0] mac_fixpt_t_0;  // int32
  reg signed [31:0] mac_fixpt_t_1;  // int32
  reg signed [31:0] mac_fixpt_add_temp [0:126];  // int32 [127]
  reg signed [31:0] mac_fixpt_add_temp_0 [0:6];  // int32 [7]
  reg [15:0] mac_fixpt_add_cast [0:6];  // ufix16_En13 [7]
  reg [13:0] mac_fixpt_t_2 [0:6];  // ufix14_En13 [7]
  reg [14:0] mac_fixpt_add_cast_0 [0:6];  // ufix15_En13 [7]
  reg [15:0] mac_fixpt_add_cast_1 [0:6];  // ufix16_En13 [7]
  reg [15:0] mac_fixpt_add_temp_1 [0:6];  // ufix16_En13 [7]
  reg signed [31:0] mac_fixpt_t_3 [0:126];  // int32 [127]
  reg signed [31:0] mac_fixpt_t_4 [0:126] [0:6];  // int32 [127x7]


  assign M[0] = M_0;
  assign M[1] = M_1;
  assign M[2] = M_2;
  assign M[3] = M_3;
  assign M[4] = M_4;
  assign M[5] = M_5;
  assign M[6] = M_6;
  assign M[7] = M_7;
  assign M[8] = M_8;
  assign M[9] = M_9;
  assign M[10] = M_10;
  assign M[11] = M_11;
  assign M[12] = M_12;
  assign M[13] = M_13;
  assign M[14] = M_14;
  assign M[15] = M_15;
  assign M[16] = M_16;
  assign M[17] = M_17;
  assign M[18] = M_18;
  assign M[19] = M_19;
  assign M[20] = M_20;
  assign M[21] = M_21;
  assign M[22] = M_22;
  assign M[23] = M_23;
  assign M[24] = M_24;
  assign M[25] = M_25;
  assign M[26] = M_26;
  assign M[27] = M_27;
  assign M[28] = M_28;
  assign M[29] = M_29;
  assign M[30] = M_30;
  assign M[31] = M_31;
  assign M[32] = M_32;
  assign M[33] = M_33;
  assign M[34] = M_34;
  assign M[35] = M_35;
  assign M[36] = M_36;
  assign M[37] = M_37;
  assign M[38] = M_38;
  assign M[39] = M_39;
  assign M[40] = M_40;
  assign M[41] = M_41;
  assign M[42] = M_42;
  assign M[43] = M_43;
  assign M[44] = M_44;
  assign M[45] = M_45;
  assign M[46] = M_46;
  assign M[47] = M_47;
  assign M[48] = M_48;
  assign M[49] = M_49;
  assign M[50] = M_50;
  assign M[51] = M_51;
  assign M[52] = M_52;
  assign M[53] = M_53;
  assign M[54] = M_54;
  assign M[55] = M_55;
  assign M[56] = M_56;
  assign M[57] = M_57;
  assign M[58] = M_58;
  assign M[59] = M_59;
  assign M[60] = M_60;
  assign M[61] = M_61;
  assign M[62] = M_62;
  assign M[63] = M_63;

  assign N[0] = N_0;
  assign N[1] = N_1;
  assign N[2] = N_2;
  assign N[3] = N_3;
  assign N[4] = N_4;
  assign N[5] = N_5;
  assign N[6] = N_6;

  assign W[0] = W_0;
  assign W[1] = W_1;
  assign W[2] = W_2;
  assign W[3] = W_3;
  assign W[4] = W_4;
  assign W[5] = W_5;
  assign W[6] = W_6;

  always @* begin
    //HDL code generation from MATLAB function: mac_fixpt
    // Processing Element, a simple mac
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //                                                                          %
    //           Generated by MATLAB 9.1 and Fixed-Point Designer 5.3           %
    //                                                                          %
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Author: Thilina Mallawa Arachchi
    // Email address: thilina@ieee.org  
    // March 2017; Last revision: 17-March-2017
    //MAC simply multiplies and accumalates

    for(mac_fixpt_t_0 = 32'sd0; mac_fixpt_t_0 <= 32'sd63; mac_fixpt_t_0 = mac_fixpt_t_0 + 32'sd1) begin
      mac_fixpt_M_local[mac_fixpt_t_0] = {1'b0, {M[mac_fixpt_t_0], 12'b000000000000}};
    end


    for(mac_fixpt_mm = 32'sd0; mac_fixpt_mm <= 32'sd126; mac_fixpt_mm = mac_fixpt_mm + 32'sd1) begin
      mac_fixpt_add_temp[mac_fixpt_mm] = mac_fixpt_mm + 32'sd1;
      mac_fixpt_tmp = mac_fixpt_add_temp[mac_fixpt_mm][6:0];
      mac_fixpt_t_3[mac_fixpt_mm] = {25'b0, Tm};
      if ((mac_fixpt_mm + 32'sd1) <= mac_fixpt_t_3[mac_fixpt_mm]) begin

        for(mac_fixpt_nn = 32'sd0; mac_fixpt_nn <= 32'sd6; mac_fixpt_nn = mac_fixpt_nn + 32'sd1) begin
          mac_fixpt_add_temp_0[mac_fixpt_nn] = mac_fixpt_nn + 32'sd1;
          mac_fixpt_tmp_0 = mac_fixpt_add_temp_0[mac_fixpt_nn][2:0];
          mac_fixpt_t_4[mac_fixpt_mm][mac_fixpt_nn] = {29'b0, Tn};
          if ((mac_fixpt_nn + 32'sd1) <= mac_fixpt_t_4[mac_fixpt_mm][mac_fixpt_nn]) begin
            mac_fixpt_add_cast[mac_fixpt_nn] = {1'b0, {mac_fixpt_M_local[$signed({1'b0, mac_fixpt_tmp}) - 32'sd1], 1'b0}};
            if (N[$signed({1'b0, mac_fixpt_tmp_0}) - 32'sd1] == 1'b1) begin
              mac_fixpt_t_2[mac_fixpt_nn] = W[$signed({1'b0, mac_fixpt_tmp_0}) - 32'sd1];
            end
            else begin
              mac_fixpt_t_2[mac_fixpt_nn] = 14'b00000000000000;
            end
            mac_fixpt_add_cast_0[mac_fixpt_nn] = {1'b0, mac_fixpt_t_2[mac_fixpt_nn]};
            mac_fixpt_add_cast_1[mac_fixpt_nn] = {1'b0, mac_fixpt_add_cast_0[mac_fixpt_nn]};
            mac_fixpt_add_temp_1[mac_fixpt_nn] = mac_fixpt_add_cast[mac_fixpt_nn] + mac_fixpt_add_cast_1[mac_fixpt_nn];
            mac_fixpt_M_local[$signed({1'b0, mac_fixpt_tmp}) - 32'sd1] = mac_fixpt_add_temp_1[mac_fixpt_nn][14:1];
          end
        end

      end
    end


    for(mac_fixpt_t_1 = 32'sd0; mac_fixpt_t_1 <= 32'sd63; mac_fixpt_t_1 = mac_fixpt_t_1 + 32'sd1) begin
      M_out[mac_fixpt_t_1] = mac_fixpt_M_local[mac_fixpt_t_1];
    end

  end



  assign M_out_0 = M_out[0];

  assign M_out_1 = M_out[1];

  assign M_out_2 = M_out[2];

  assign M_out_3 = M_out[3];

  assign M_out_4 = M_out[4];

  assign M_out_5 = M_out[5];

  assign M_out_6 = M_out[6];

  assign M_out_7 = M_out[7];

  assign M_out_8 = M_out[8];

  assign M_out_9 = M_out[9];

  assign M_out_10 = M_out[10];

  assign M_out_11 = M_out[11];

  assign M_out_12 = M_out[12];

  assign M_out_13 = M_out[13];

  assign M_out_14 = M_out[14];

  assign M_out_15 = M_out[15];

  assign M_out_16 = M_out[16];

  assign M_out_17 = M_out[17];

  assign M_out_18 = M_out[18];

  assign M_out_19 = M_out[19];

  assign M_out_20 = M_out[20];

  assign M_out_21 = M_out[21];

  assign M_out_22 = M_out[22];

  assign M_out_23 = M_out[23];

  assign M_out_24 = M_out[24];

  assign M_out_25 = M_out[25];

  assign M_out_26 = M_out[26];

  assign M_out_27 = M_out[27];

  assign M_out_28 = M_out[28];

  assign M_out_29 = M_out[29];

  assign M_out_30 = M_out[30];

  assign M_out_31 = M_out[31];

  assign M_out_32 = M_out[32];

  assign M_out_33 = M_out[33];

  assign M_out_34 = M_out[34];

  assign M_out_35 = M_out[35];

  assign M_out_36 = M_out[36];

  assign M_out_37 = M_out[37];

  assign M_out_38 = M_out[38];

  assign M_out_39 = M_out[39];

  assign M_out_40 = M_out[40];

  assign M_out_41 = M_out[41];

  assign M_out_42 = M_out[42];

  assign M_out_43 = M_out[43];

  assign M_out_44 = M_out[44];

  assign M_out_45 = M_out[45];

  assign M_out_46 = M_out[46];

  assign M_out_47 = M_out[47];

  assign M_out_48 = M_out[48];

  assign M_out_49 = M_out[49];

  assign M_out_50 = M_out[50];

  assign M_out_51 = M_out[51];

  assign M_out_52 = M_out[52];

  assign M_out_53 = M_out[53];

  assign M_out_54 = M_out[54];

  assign M_out_55 = M_out[55];

  assign M_out_56 = M_out[56];

  assign M_out_57 = M_out[57];

  assign M_out_58 = M_out[58];

  assign M_out_59 = M_out[59];

  assign M_out_60 = M_out[60];

  assign M_out_61 = M_out[61];

  assign M_out_62 = M_out[62];

  assign M_out_63 = M_out[63];

endmodule  // mac_fixpt

